#!/bin/bash
# usage: bin/compile <build-dir> <cache-dir>

set -eo pipefail

# Go releases for Darwin beginning with 1.2rc1
# have included more than one build, depending
# on the specific version of Mac OS X. Try to
# account for that, but don't try too hard.
# This doesn't affect Heroku builds, it's only
# for testing on Darwin systems.
platext() {
    case $1 in
    go1.0*|go1.1|go1.1.*|go1.2|go1.2.*|go1.3|go1.3.*) return ;;
    esac
    case $(uname|tr A-Z a-z) in
    darwin) printf %s -osx10.8 ;;
    esac
}

# Go releases have moved to a new URL scheme
# starting with Go version 1.2.2. Return the old
# location for known old versions and the new
# location otherwise.
urlfor() {
    ver=$1
    file=$2
    case $ver in
    go1.0*|go1.1beta*|go1.1rc*|go1.1|go1.1.*|go1.2beta*|go1.2rc*|go1.2|go1.2.1)
        echo http://go.googlecode.com/files/$file
        ;;
    *)
        echo https://storage.googleapis.com/golang/$file
        ;;
    esac
}

mkdir -p "$1" "$2"
build=$(cd "$1/" && pwd)
cache=$(cd "$2/" && pwd)
buildpack=$(dirname $(dirname $0))
arch=$(uname -m|tr A-Z a-z)
if test $arch = x86_64
then arch=amd64
fi
plat=$(uname|tr A-Z a-z)-$arch

# Python
venv=$cache/venv
mkdir -p $cache/pip
python=python2.7
PATH=$buildpack/$plat/bin:$venv/bin:$PATH

virtualenv() {
    python "$buildpack/vendor/virtualenv-1.7/virtualenv.py" "$@"
}


if test -f $build/.gover
then
    GOVERSION=$(cat $build/.gover)
fi
ver=go${GOVERSION:-1.3.1}

if test -f $build/.gopath
then
    GOPKGS=$(cat $build/.gopath)
else
    echo >&2 " !     A .gopath file containing the apps GOPATH is required."
    exit 1    
fi

file=${GOFILE:-$ver.$(uname|tr A-Z a-z)-amd64$(platext $ver).tar.gz}
url=${GOURL:-$(urlfor $ver $file)}

if test -d $cache/$ver/go
then
    echo "-----> Using $ver"
else
    rm -rf $cache/* # be sure not to build up cruft
    mkdir -p $cache/$ver
    cd $cache/$ver
    echo -n "-----> Installing $ver..."
    curl -sO $url
    tar zxf $file
    rm -f $file
    echo " done"
fi

if ! (which hg >/dev/null && which bzr >/dev/null)
then
    echo -n "       Installing Virtualenv..."
    virtualenv --python $python --distribute --never-download --prompt='(venv) ' $venv > /dev/null 2>&1
    . $venv/bin/activate > /dev/null 2>&1
    echo " done"

    echo -n "       Installing Mercurial..."
    pip install mercurial > /dev/null 2>&1
    echo " done"

    echo -n "       Installing Bazaar..."
    pip install bzr > /dev/null 2>&1
    echo " done"
fi


GOROOT=$cache/$ver/go export GOROOT
PATH=$GOROOT/bin:$PATH
GOPATH=$build/.heroku/go export GOPATH

mkdir -p $GOPATH/src
arr=$(echo $GOPKGS | tr ":" "\n")
for x in $arr
do
    cp -r $build/$x/src/* $GOPATH/src/
done

unset GIT_DIR # unset git dir or it will mess with goinstall
cd $GOPATH
echo "-----> Running: go get -tags heroku ..."
go get -tags heroku ...


if test -e $build/bin && ! test -d $build/bin
then
    echo >&2 " !     File bin exists and is not a directory."
    exit 1
fi
mkdir -p $build/bin
mv $GOPATH/bin/* $build/bin
rm -rf $build/.heroku

mkdir -p $build/.profile.d
echo 'PATH=$PATH:$HOME/bin' > $build/.profile.d/go.sh
